-- 1. Total revenue if meatlovers are $12 and Vegetarians are $10
SELECT
SUM(CASE
	WHEN pizza_id = 1 THEN 12
	ELSE 10
END) total_price
FROM customer_orders c JOIN runner_orders r
ON c.order_id = r.order_id
WHERE cancellation IS NULL

-- 2. Total revenue if toppings where $1
SELECT
SUM(
CASE
	WHEN pizza_id = 1 AND extras is null THEN 12
	WHEN pizza_id = 2 AND extras is null THEN 10
	WHEN extras = '1, 4' THEN 14
	WHEN pizza_id = 1 AND extras is not null THEN 13
	WHEN pizza_id = 2 AND extras is not null THEN 11
END) total_price
FROM customer_orders c JOIN runner_orders r
ON c.order_id = r.order_id
WHERE cancellation IS NULL

-- 3 Ratings
SELECT customer_id, c.order_id, runner_id,
CASE
	WHEN [duration minutes] <= 15 THEN 5
	WHEN [duration minutes] between 20 AND 27 THEN 4
	WHEN [duration minutes] = 40 THEN 2
	ELSE 3
END rating,
order_time, pickup_time, 
DATEDIFF(MINUTE, order_time, pickup_time) time_between_order_and_pickup, [duration minutes],
AVG([distance km]/[duration minutes]) avg_speed, COUNT(pizza_id) total_pizzas
FROM customer_orders c JOIN runner_orders r
ON c.order_id = r.order_id
WHERE cancellation IS NULL
GROUP BY customer_id, c.order_id, runner_id, order_time, pickup_time, [duration minutes]

-- Total revenue if runner's where payed $0.30 per kilometer travelled
;WITH adjusted_pay_cte AS (
SELECT SUM([distance km] * .30) runner_paycheck,
SUM(
CASE
	WHEN pizza_id = 1 THEN 12
	ELSE 10
END) revenue
FROM runner_orders r JOIN customer_orders c
ON r.order_id = c.order_id
WHERE cancellation IS NULL
)
SELECT revenue - runner_paycheck total_pay
FROM adjusted_pay_cte

-- 5. Supreme pizza
-- Regular menu
SELECT n.pizza_id, pizza_name, toppings
from pizza_names n
JOIN pizza_recipes r
	on n.pizza_id = r.pizza_id

create table #pizza_names (
pizza_id int,
pizza_name varchar (10)
)

insert into #pizza_names 
SELECT *
from pizza_names

insert into #pizza_names values 
(3, 'Supreme')

create table #pizza_recipes (
pizza_id int,
toppings text
)

insert into #pizza_recipes 
SELECT * 
from pizza_recipes

insert into #pizza_recipes values
(3, '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12')

-- Supreme Pizza with all Toppings
SELECT n.pizza_id, pizza_name, toppings
from #pizza_names n
JOIN #pizza_recipes r
	on n.pizza_id = r.pizza_id
